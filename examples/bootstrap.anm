# What I'm trying to do here is set up a reasonable base environment without
# polluting the top-level environment (i.e. global definitions bad!). I
# interchangeably call this environment the bootstrap environment, since it
# defines a lot of what might be considered the core of Anemone.

# TODO does this actually abide by it?
# I've made a concession to readability by defining `__anemone-bsquote`. This
# abides by the vendor-specific naming conventions I've established, so there
# shouldn't be a clash when ported to other implementations. However, since it's
# only used once, in principle it could be inlined.

# Quote all passed expressions and combine them into a sequence block.
# It's just
#     $def (__anemone-bsquote _ _ code) `($__sequence__ ,@code)
# but I don't have quasiquote available yet.
$__defineHere__ __anemone-bsquote: $__lambda__ (env loc code): __sexpr-intro__:
  # Notice how decorator syntax can smush down excessive indentation.
  @__cons__ (__sexpr-intro__: __sym-intro__ "__operate__")
  @__cons__ (__sexpr-intro__: __sym-intro__ "__sequence__")
  code

# Of course, the base environment we are defining is bound in the top-level so
# that it can be accessed by later code at all. However, the base environment
# must _not_ be a child of the top-level, because that would mean that any names
# bound in it or its children would reserve top-level names—thus polluting the
# namespace like we were trying to avoid.
$__defineHere__ __anemone-bs:
  @__upd-name__: __name-intro__ (__sym-intro__ "value") (__sym-intro__ "__anemone-bs")
  __new-emptyEnv!__()

# Make a Minimal Environment
# ==========================

# Since the freshly-made bootstrap environment is empty, there's not much we can
# do in it. It would be better if it had the same bindings as the top-level, but
# we don't need to insert those bindings from here (which would be tedious
# without supporting definitions.

# I'll need access to the top level to suck in the bindings I need from within.
__define__ __anemone-bs (__sym-intro__ "value") (__sym-intro__ "__top__"):
  @__upd-name__: __name-intro__ (__sym-intro__ "value") (__sym-intro__ "__top__")
  $($__lambda__ (env loc sexpr) env)

# This will also require putting in __defineHere__ and __lookup__.
# These two will also need __sym-intro__ so I can lift strings into symbols
# (__sexpr-elim__ would be partial function, so I've avoided it).
__define__ __anemone-bs (__sym-intro__ "value") (__sym-intro__ "__defineHere__") __defineHere__
__define__ __anemone-bs (__sym-intro__ "value") (__sym-intro__ "__lookup__") __lookup__
__define__ __anemone-bs (__sym-intro__ "value") (__sym-intro__ "__sym-intro__") __sym-intro__

# I also need `__sequence__` available because `__anemone-bsquote` uses it.
__define__ __anemone-bs (__sym-intro__ "value") (__sym-intro__ "__sequence__") __sequence__

# Importing the Top-Level
# -----------------------

# Importing all the top-level bindings by hand would be tedious without defining
# some helper functions. However, we don't necessarily want to export these
# special-purpose helpers from the base environment. Therefore, we will create
# out base environment from inside a child of the base environment. This
# technique is the same pattern as making local definitions, so we will call
# this child the "local environment".


# The rest of the file will be evaluated inside the local environment, so there's no reason to increase the indentation level.
# This is where super-decorator syntax comes in handy.

@__eval__ (__new-env!__ __anemone-bs)
$__anemone-bsquote: # TODO make this a super-decorator and decrease indentation; I've only waited on this because I have a little debug code below that can disappear when Haskell can run multiple files

  # The first thing to do is ensure we can define things in other environments, and especially the bootstrap environment.
  # I'm also already tired of writing dunders, so let's fix that.
  $__defineHere__ def __defineHere__ # uses the `__defineHere__` that we inserted into the bootstrap env
  $def defIn: __lookup__ __top__ (__sym-intro__ "value") (__sym-intro__ "__define__")
  $def bsEnv: __lookup__ __top__ (__sym-intro__ "value") (__sym-intro__ "__anemone-bs")

  # We'll also quickly want to construct and deconstruct lists, so let's pull that in as well.
  $def list: __lookup__ __top__ (__sym-intro__ "value") (__sym-intro__ "__list__")
  $def uncons: __lookup__ __top__ (__sym-intro__ "value") (__sym-intro__ "__uncons__")

  # A handful of classic helpers drawn from functional programming wouldn't go awry.
  # And by helpers, I guess I mean we also need λ itself.
  $def fn: __lookup__ __top__ (__sym-intro__ "value") (__sym-intro__ "__lambda__")
  $def identity: $fn (x) x
  $def const: $fn (x _ign) x
  $def const-lazy: $fn ((~ x) _ign) (__force__ x)
  $def map!: $fn (f!): $__sequence__:
    # The bang here is because we expect `f!` to have side effects (technically it's expected impure).
    # A map that performs side effects is likely not interested in the actual mapped list, so we don't bother accumulating it.
    # Since we call `f!`, the map function should be marked impure as well, which handily distinguishes it from the usual map function.
    $def loop!: $fn (xs₀): uncons xs₀:
      const ()
      $fn (x xs): $__sequence__:
        f! x
        loop! xs

  # We need a primitive import procedure to import our primitives.
  # All this does is move symbols from the top-level environment to the bootstrap environment.
  $def _suck: $fn (str): $__sequence__:
    $def valNs: __sym-intro__ "value"
    $def sym: __sym-intro__ str
    defIn bsEnv valNs sym: __lookup__ __top__ valNs sym

  # And now we finally have the machinery to import things en-masse, so let's do!
  # Note that since __list__ isn't defined here yet, I don't yet have access to zexpr's square-bracket list syntax.
  map! _suck: $list
    # core features
    "__lambda__" "__eval__" "__force__"
    # sequential programming
    # skip "__sequence__"
    # skip "__defineHere__"
    # booleans
    "__true__" "__false__"
    "__cond__"
    "__equal__"
    # arithmetic
    "__add__" "__sub__"
    # lists
    "__list__" "__cons__" "__uncons__"
    # s-exprs
    "__sexpr-intro__" "__sexpr-elim__"
    # skip "__sym-intro__"
    "__sym-elim__"
    # types
    "__typeof__"
    "__type-elim__"
    "__tycon-unit__" "__tycon-int__"
    # environments
    "__new-env!__" "__new-emptyEnv!__"
    # skip "__lookup__"
    "__define__"
    # control
    "__raise__"
    "__syntaxErr-intro__"
    # metadata
    "__name-intro__" "__name-elim__"
    "__upd-name__" "__upd-loc__"

  # It is at this point that we have made a copy of the top-level environment in
  # the bootstrap environment. The only difference is that this copy has a child
  # that defines a few extra helper functions (and will define a few more
  # later). The names of these helpers are reserved, and cannot be defined in
  # the base environment (because that would create shadowing). However, they
  # _can_ be bound in other children of the base. Our intention is for the base
  # environment to be "frozen" after its creation, and the only way to extend it
  # will be to create new children. Therefore, we can use as many names as we
  # want in the local environment without risking a name conflict in code that
  # uses the bootstrap environment. If we want those names available in the base
  # environment as well, we will have to define them there instead of in the
  # local environment.

####################################

  # TODO
  # I think pattern-matching, especially against s-exprs is really important
  # so, probably quasiquote pattern is the first thing to do
  # also, I'll then want to build quasiquote expressions
  # I think the expressions being built after the patterns would shorten the code

####################################

  # TODO I'm going to try out some pattern stuff
  # however, I should probably define a Pattern type

  $def patNs: __sym-intro__ "pattern"

  # In what comes next, I'll be frequently disassembling lists of s-exprs.
  # This serves as a crude list pattern match.
  $def fromNtup: $fn (n₀ tup₀ ok₀ (~ no)): $__sequence__:
    $def loop: $fn (n tup ok):
      $__cond__:
        {n __equal__ 0} :: __uncons__ tup:
          const ok
          $fn (x xs): __force__ no
        __true__ :: __uncons__ tup:
          const-lazy: __force__ no
          $fn (x xs): loop {n __sub__ 1} xs (ok x)
    loop n₀ tup₀ ok₀
  $def fromSymbol: $fn (sexpr ok (~ no)): __sexpr-elim__ sexpr:
    const-lazy: __force__ no
    const-lazy: __force__ no
    ok
    const-lazy: __force__ no

  $def defPattern: $fn (env loc sexprs): fromNtup 2 sexprs:
    $fn (x? body): fromSymbol x?:
      $fn (x): __define__ env patNs x (__eval__ env body)
      __raise__: __syntaxErr-intro__ x? "expected symbol"
    __raise__: __syntaxErr-intro__ sexprs "`($defPattern ,symbol ,body)"


  $defPattern __variable__: $fn (var):
    $fn (v env ok no): $__sequence__:
      __define__ env valNs var v

  $defPattern __equal__: $fn (expected):
    $fn (given env ok no): $__cond__:
      __equal__ expected given :: ok
      __true__ :: no

  $defPattern Nil: $fn (v env ok no): __uncons__ v:
    const ok
    $fn (x xs): no
  $defPattern Cons: $fn (v env ok no): __uncons__ v:
    const: no
    $fn (x xs): ok x xs

  $def compilePat: $fn (env loc sexprs): fromNtup 1 sexprs:
    $fn (sexpr): __sexpr-elim__ sexpr:
      __equal__
      __equal__
      $fn (x): __lookup__ env patNs x
      const-lazy: __raise__ TODO
    __raise__: __syntaxErr-intro__ sexprs "`($compilePat ,pattern)"

  # ($fn (y z w (~ x)) x) 1 2 3 asdf
  # fromNtup 2 [1, 2] ($fn (a b) "a") asdf
  $def foo: $compilePat Nil
  foo [1] $($fn (env loc exprs) env) "hello" "uh-oh"

# DEBUG
# __eval__ __anemone-bs: $__anemone-bsquote:
#   __define__ $($__lambda__ (env loc exprs) env) (__sym-intro__ "value") (__sym-intro__ "bar") 1
